"""
Cog para comandos de cotizaciones y conversiones de monedas
"""

import logging
from datetime import datetime
from discord.ext import commands
import discord
import impuestito
from impuestito.main import (
    cotization, oficial, blue, euro, euro_blue, 
    calcularImpuestoPais
)

logger = logging.getLogger(__name__)

class CurrencyCommands(commands.Cog):
    """Comandos relacionados con cotizaciones y conversiones de monedas"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @commands.command(name='cotizacion', aliases=['cotizaciones', 'cot'])
    async def cotizacion_command(self, ctx):
        """Comando de cotizaci√≥n completa"""
        try:
            # Crear embed para la respuesta
            embed = discord.Embed(
                title="üìä Cotizaciones Actuales",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            # Obtener cotizaci√≥n completa
            cotizacion_data = cotization
            
            # D√≥lar Oficial
            if 'oficial' in cotizacion_data:
                oficial_data = cotizacion_data['oficial']
                embed.add_field(
                    name="üíµ D√≥lar Oficial",
                    value=f"Compra: ${oficial_data.get('value_buy', 'N/A')}\n"
                          f"Venta: ${oficial_data.get('value_sell', 'N/A')}\n"
                          f"Promedio: ${oficial_data.get('value_avg', 'N/A')}",
                    inline=True
                )
            
            # D√≥lar Blue
            if 'blue' in cotizacion_data:
                blue_data = cotizacion_data['blue']
                embed.add_field(
                    name="üíô D√≥lar Blue",
                    value=f"Compra: ${blue_data.get('value_buy', 'N/A')}\n"
                          f"Venta: ${blue_data.get('value_sell', 'N/A')}\n"
                          f"Promedio: ${blue_data.get('value_avg', 'N/A')}",
                    inline=True
                )
            
            # Euro Oficial
            if 'oficial_euro' in cotizacion_data:
                euro_oficial_data = cotizacion_data['oficial_euro']
                embed.add_field(
                    name="üá™üá∫ Euro Oficial",
                    value=f"Compra: ${euro_oficial_data.get('value_buy', 'N/A')}\n"
                          f"Venta: ${euro_oficial_data.get('value_sell', 'N/A')}\n"
                          f"Promedio: ${euro_oficial_data.get('value_avg', 'N/A')}",
                    inline=True
                )
            
            # Euro Blue
            if 'blue_euro' in cotizacion_data:
                euro_blue_data = cotizacion_data['blue_euro']
                embed.add_field(
                    name="üá™üá∫üíô Euro Blue",
                    value=f"Compra: ${euro_blue_data.get('value_buy', 'N/A')}\n"
                          f"Venta: ${euro_blue_data.get('value_sell', 'N/A')}\n"
                          f"Promedio: ${euro_blue_data.get('value_avg', 'N/A')}",
                    inline=True
                )
            
            # √öltima actualizaci√≥n
            if 'last_update' in cotizacion_data:
                embed.set_footer(text=f"√öltima actualizaci√≥n: {cotizacion_data['last_update']}")
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error en cotizacion_command: {e}")
            await ctx.send("‚ùå Error al obtener las cotizaciones. Intenta m√°s tarde.")
    
    @commands.command(name='oficial')
    async def oficial_command(self, ctx):
        """Comando para d√≥lar oficial"""
        try:
            embed = discord.Embed(
                title="üíµ D√≥lar Oficial",
                description=f"**${oficial}**",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            await ctx.send(embed=embed)
        except Exception as e:
            logger.error(f"Error en oficial_command: {e}")
            await ctx.send("‚ùå Error al obtener el d√≥lar oficial.")
    
    @commands.command(name='blue')
    async def blue_command(self, ctx):
        """Comando para d√≥lar blue"""
        try:
            embed = discord.Embed(
                title="üíô D√≥lar Blue",
                description=f"**${blue}**",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            await ctx.send(embed=embed)
        except Exception as e:
            logger.error(f"Error en blue_command: {e}")
            await ctx.send("‚ùå Error al obtener el d√≥lar blue.")
    
    @commands.command(name='euro')
    async def euro_command(self, ctx):
        """Comando para euro oficial"""
        try:
            embed = discord.Embed(
                title="üá™üá∫ Euro Oficial",
                description=f"**${euro}**",
                color=discord.Color.gold(),
                timestamp=datetime.now()
            )
            await ctx.send(embed=embed)
        except Exception as e:
            logger.error(f"Error en euro_command: {e}")
            await ctx.send("‚ùå Error al obtener el euro oficial.")
    
    @commands.command(name='euro_blue')
    async def euro_blue_command(self, ctx):
        """Comando para euro blue"""
        try:
            embed = discord.Embed(
                title="üá™üá∫üíô Euro Blue",
                description=f"**${euro_blue}**",
                color=discord.Color.purple(),
                timestamp=datetime.now()
            )
            await ctx.send(embed=embed)
        except Exception as e:
            logger.error(f"Error en euro_blue_command: {e}")
            await ctx.send("‚ùå Error al obtener el euro blue.")
    
    @commands.command(name='impuesto_pais', aliases=['impuesto'])
    async def impuesto_pais_command(self, ctx, cantidad: float):
        """Comando para calcular impuesto pa√≠s"""
        try:
            # Calcular impuesto pa√≠s
            resultado = calcularImpuestoPais(cantidad)
            
            # Crear embed
            embed = discord.Embed(
                title="üí∞ C√°lculo Impuesto Pa√≠s",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìä Detalles",
                value=f"‚Ä¢ Cantidad original: ${resultado['cantidadVieja']} USD\n"
                      f"‚Ä¢ Impuesto agregado: ${resultado['agregado']} USD\n"
                      f"‚Ä¢ Cantidad final: ${resultado['cantidadFinal']} USD",
                inline=False
            )
            
            embed.add_field(
                name="üí° Informaci√≥n",
                value="El impuesto pa√≠s es del 30% sobre la cantidad original.",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
        except Exception as e:
            logger.error(f"Error en impuesto_pais_command: {e}")
            await ctx.send("‚ùå Error al calcular el impuesto pa√≠s.")
    
    @commands.command(name='dolar_pesos', aliases=['usd_ars'])
    async def dolar_pesos_command(self, ctx, cantidad_usd: float):
        """Comando para convertir d√≥lares a pesos"""
        try:
            # Calcular conversi√≥n usando el d√≥lar oficial
            pesos = oficial * cantidad_usd
            
            # Crear embed
            embed = discord.Embed(
                title="üí± Conversi√≥n D√≥lar a Pesos",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìä Conversi√≥n",
                value=f"‚Ä¢ Cantidad: ${cantidad_usd} USD\n"
                      f"‚Ä¢ Cotizaci√≥n: ${oficial} ARS/USD\n"
                      f"‚Ä¢ Resultado: ${pesos:,.2f} ARS",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except ValueError:
            await ctx.send("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
        except Exception as e:
            logger.error(f"Error en dolar_pesos_command: {e}")
            await ctx.send("‚ùå Error al convertir d√≥lares a pesos.")

async def setup(bot):
    """Funci√≥n para cargar el cog"""
    await bot.add_cog(CurrencyCommands(bot))