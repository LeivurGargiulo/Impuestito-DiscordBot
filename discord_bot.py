#!/usr/bin/env python3
"""
Discord Bot para Impuestito
Bot de Discord que proporciona informaci√≥n sobre cotizaciones de monedas
y c√°lculos de impuestos en Argentina usando el paquete impuestito.
Convertido desde el bot de Telegram original.
"""

import asyncio
import logging
import os
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import traceback

import discord
from discord.ext import commands, tasks
from dotenv import load_dotenv
import impuestito
from impuestito.main import (
    cotization, oficial, blue, euro, euro_blue, 
    calcularImpuestoPais, CDolarOficial
)

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuraci√≥n del bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

# Crear bot con prefijo '!'
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# Variables globales para tracking
bot_start_time = time.time()
recent_errors = []
MAX_ERROR_LOG = 10

class BotStats:
    """Clase para manejar estad√≠sticas del bot"""
    def __init__(self):
        self.start_time = time.time()
        self.command_count = 0
        self.error_count = 0
        self.last_error = None

bot_stats = BotStats()

# ============================================================================
# EVENTOS DEL BOT
# ============================================================================

@bot.event
async def on_ready():
    """Evento que se ejecuta cuando el bot est√° listo"""
    logger.info(f'ü§ñ Bot conectado como {bot.user.name} (ID: {bot.user.id})')
    logger.info(f'üìä Servidores conectados: {len(bot.guilds)}')
    
    # Cambiar estado del bot
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="!help para comandos"
        )
    )
    
    # Iniciar tarea de limpieza de errores
    cleanup_errors.start()

@bot.event
async def on_command(ctx):
    """Evento que se ejecuta cuando se usa un comando"""
    bot_stats.command_count += 1
    logger.info(f'Comando ejecutado: {ctx.command.name} por {ctx.author} en {ctx.guild}')

@bot.event
async def on_command_error(ctx, error):
    """Manejador global de errores para comandos"""
    bot_stats.error_count += 1
    bot_stats.last_error = error
    
    # Agregar error al log reciente
    error_info = {
        'timestamp': datetime.now(),
        'command': ctx.command.name if ctx.command else 'Unknown',
        'user': f"{ctx.author.name}#{ctx.author.discriminator}",
        'guild': ctx.guild.name if ctx.guild else 'DM',
        'error': str(error),
        'traceback': traceback.format_exc()
    }
    recent_errors.append(error_info)
    
    # Mantener solo los √∫ltimos errores
    if len(recent_errors) > MAX_ERROR_LOG:
        recent_errors.pop(0)
    
    logger.error(f"Error en comando {ctx.command}: {error}")
    logger.error(traceback.format_exc())
    
    # Mensaje de error para el usuario
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå Comando no encontrado. Usa `!help` para ver los comandos disponibles.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå Faltan argumentos requeridos. Usa `!help {ctx.command.name}` para m√°s informaci√≥n.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå Argumento inv√°lido. Verifica el formato del comando.")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è∞ Comando en cooldown. Intenta en {error.retry_after:.1f} segundos.")
    else:
        await ctx.send("‚ùå Ocurri√≥ un error inesperado. Por favor, intenta m√°s tarde.")

# ============================================================================
# TAREAS EN SEGUNDO PLANO
# ============================================================================

@tasks.loop(hours=1)
async def cleanup_errors():
    """Limpia errores antiguos del log"""
    current_time = datetime.now()
    global recent_errors
    
    # Remover errores m√°s antiguos de 24 horas
    recent_errors = [
        error for error in recent_errors 
        if current_time - error['timestamp'] < timedelta(hours=24)
    ]
    
    logger.info(f"Limpieza de errores completada. {len(recent_errors)} errores en log.")

# ============================================================================
# COMANDOS DEL BOT
# ============================================================================

@bot.command(name='start', aliases=['help', 'ayuda'])
async def start_command(ctx):
    """Comando de inicio - Mensaje de bienvenida"""
    embed = discord.Embed(
        title="ü§ñ Bot de Impuestito",
        description="¬°Hola! Soy un bot que te proporciona informaci√≥n sobre cotizaciones de monedas y c√°lculos de impuestos en Argentina.",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="üìã Comandos disponibles:",
        value="""
‚Ä¢ `!start` - Muestra este mensaje de ayuda
‚Ä¢ `!cotizacion` - Cotizaci√≥n actual de todas las monedas
‚Ä¢ `!oficial` - Cotizaci√≥n del d√≥lar oficial
‚Ä¢ `!blue` - Cotizaci√≥n del d√≥lar blue
‚Ä¢ `!euro` - Cotizaci√≥n del euro oficial
‚Ä¢ `!euro_blue` - Cotizaci√≥n del euro blue
‚Ä¢ `!impuesto_pais <cantidad>` - Calcula el impuesto pa√≠s
‚Ä¢ `!dolar_pesos <cantidad>` - Convierte d√≥lares a pesos
‚Ä¢ `!debug` - Informaci√≥n de estado del bot
        """,
        inline=False
    )
    
    embed.add_field(
        name="üí° Ejemplo:",
        value="`!impuesto_pais 100` para calcular el impuesto pa√≠s sobre $100 USD",
        inline=False
    )
    
    embed.set_footer(text="Bot de Impuestito para Discord")
    embed.timestamp = datetime.now()
    
    await ctx.send(embed=embed)

@bot.command(name='cotizacion', aliases=['cotizaciones', 'cot'])
async def cotizacion_command(ctx):
    """Comando de cotizaci√≥n completa"""
    try:
        # Crear embed para la respuesta
        embed = discord.Embed(
            title="üìä Cotizaciones Actuales",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        # Obtener cotizaci√≥n completa
        cotizacion_data = cotization
        
        # D√≥lar Oficial
        if 'oficial' in cotizacion_data:
            oficial_data = cotizacion_data['oficial']
            embed.add_field(
                name="üíµ D√≥lar Oficial",
                value=f"Compra: ${oficial_data.get('value_buy', 'N/A')}\n"
                      f"Venta: ${oficial_data.get('value_sell', 'N/A')}\n"
                      f"Promedio: ${oficial_data.get('value_avg', 'N/A')}",
                inline=True
            )
        
        # D√≥lar Blue
        if 'blue' in cotizacion_data:
            blue_data = cotizacion_data['blue']
            embed.add_field(
                name="üíô D√≥lar Blue",
                value=f"Compra: ${blue_data.get('value_buy', 'N/A')}\n"
                      f"Venta: ${blue_data.get('value_sell', 'N/A')}\n"
                      f"Promedio: ${blue_data.get('value_avg', 'N/A')}",
                inline=True
            )
        
        # Euro Oficial
        if 'oficial_euro' in cotizacion_data:
            euro_oficial_data = cotizacion_data['oficial_euro']
            embed.add_field(
                name="üá™üá∫ Euro Oficial",
                value=f"Compra: ${euro_oficial_data.get('value_buy', 'N/A')}\n"
                      f"Venta: ${euro_oficial_data.get('value_sell', 'N/A')}\n"
                      f"Promedio: ${euro_oficial_data.get('value_avg', 'N/A')}",
                inline=True
            )
        
        # Euro Blue
        if 'blue_euro' in cotizacion_data:
            euro_blue_data = cotizacion_data['blue_euro']
            embed.add_field(
                name="üá™üá∫üíô Euro Blue",
                value=f"Compra: ${euro_blue_data.get('value_buy', 'N/A')}\n"
                      f"Venta: ${euro_blue_data.get('value_sell', 'N/A')}\n"
                      f"Promedio: ${euro_blue_data.get('value_avg', 'N/A')}",
                inline=True
            )
        
        # √öltima actualizaci√≥n
        if 'last_update' in cotizacion_data:
            embed.set_footer(text=f"√öltima actualizaci√≥n: {cotizacion_data['last_update']}")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en cotizacion_command: {e}")
        await ctx.send("‚ùå Error al obtener las cotizaciones. Intenta m√°s tarde.")

@bot.command(name='oficial')
async def oficial_command(ctx):
    """Comando para d√≥lar oficial"""
    try:
        embed = discord.Embed(
            title="üíµ D√≥lar Oficial",
            description=f"**${oficial}**",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Error en oficial_command: {e}")
        await ctx.send("‚ùå Error al obtener el d√≥lar oficial.")

@bot.command(name='blue')
async def blue_command(ctx):
    """Comando para d√≥lar blue"""
    try:
        embed = discord.Embed(
            title="üíô D√≥lar Blue",
            description=f"**${blue}**",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Error en blue_command: {e}")
        await ctx.send("‚ùå Error al obtener el d√≥lar blue.")

@bot.command(name='euro')
async def euro_command(ctx):
    """Comando para euro oficial"""
    try:
        embed = discord.Embed(
            title="üá™üá∫ Euro Oficial",
            description=f"**${euro}**",
            color=discord.Color.gold(),
            timestamp=datetime.now()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Error en euro_command: {e}")
        await ctx.send("‚ùå Error al obtener el euro oficial.")

@bot.command(name='euro_blue')
async def euro_blue_command(ctx):
    """Comando para euro blue"""
    try:
        embed = discord.Embed(
            title="üá™üá∫üíô Euro Blue",
            description=f"**${euro_blue}**",
            color=discord.Color.purple(),
            timestamp=datetime.now()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Error en euro_blue_command: {e}")
        await ctx.send("‚ùå Error al obtener el euro blue.")

@bot.command(name='impuesto_pais', aliases=['impuesto'])
async def impuesto_pais_command(ctx, cantidad: float):
    """Comando para calcular impuesto pa√≠s"""
    try:
        # Calcular impuesto pa√≠s
        resultado = calcularImpuestoPais(cantidad)
        
        # Crear embed
        embed = discord.Embed(
            title="üí∞ C√°lculo Impuesto Pa√≠s",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä Detalles",
            value=f"‚Ä¢ Cantidad original: ${resultado['cantidadVieja']} USD\n"
                  f"‚Ä¢ Impuesto agregado: ${resultado['agregado']} USD\n"
                  f"‚Ä¢ Cantidad final: ${resultado['cantidadFinal']} USD",
            inline=False
        )
        
        embed.add_field(
            name="üí° Informaci√≥n",
            value="El impuesto pa√≠s es del 30% sobre la cantidad original.",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    except ValueError:
        await ctx.send("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
    except Exception as e:
        logger.error(f"Error en impuesto_pais_command: {e}")
        await ctx.send("‚ùå Error al calcular el impuesto pa√≠s.")

@bot.command(name='dolar_pesos', aliases=['usd_ars'])
async def dolar_pesos_command(ctx, cantidad_usd: float):
    """Comando para convertir d√≥lares a pesos"""
    try:
        # Calcular conversi√≥n usando el d√≥lar oficial
        pesos = oficial * cantidad_usd
        
        # Crear embed
        embed = discord.Embed(
            title="üí± Conversi√≥n D√≥lar a Pesos",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä Conversi√≥n",
            value=f"‚Ä¢ Cantidad: ${cantidad_usd} USD\n"
                  f"‚Ä¢ Cotizaci√≥n: ${oficial} ARS/USD\n"
                  f"‚Ä¢ Resultado: ${pesos:,.2f} ARS",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    except ValueError:
        await ctx.send("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
    except Exception as e:
        logger.error(f"Error en dolar_pesos_command: {e}")
        await ctx.send("‚ùå Error al convertir d√≥lares a pesos.")

@bot.command(name='debug')
@commands.cooldown(1, 30, commands.BucketType.user)  # 1 uso cada 30 segundos por usuario
async def debug_command(ctx):
    """Comando de debug - Informaci√≥n del bot"""
    try:
        # Calcular uptime
        uptime = time.time() - bot_stats.start_time
        uptime_str = str(timedelta(seconds=int(uptime)))
        
        # Crear embed de debug
        embed = discord.Embed(
            title="üîß Informaci√≥n de Debug",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä Estad√≠sticas del Bot",
            value=f"‚Ä¢ Uptime: {uptime_str}\n"
                  f"‚Ä¢ Comandos ejecutados: {bot_stats.command_count}\n"
                  f"‚Ä¢ Errores totales: {bot_stats.error_count}\n"
                  f"‚Ä¢ Servidores: {len(bot.guilds)}\n"
                  f"‚Ä¢ Usuarios: {len(bot.users)}",
            inline=True
        )
        
        embed.add_field(
            name="üîó Informaci√≥n de Conexi√≥n",
            value=f"‚Ä¢ Latencia: {round(bot.latency * 1000)}ms\n"
                  f"‚Ä¢ Versi√≥n Discord.py: {discord.__version__}\n"
                  f"‚Ä¢ Python: {discord.sys.version.split()[0]}",
            inline=True
        )
        
        # Informaci√≥n del √∫ltimo error
        if bot_stats.last_error:
            embed.add_field(
                name="‚ö†Ô∏è √öltimo Error",
                value=f"```{str(bot_stats.last_error)[:500]}...```" if len(str(bot_stats.last_error)) > 500 else f"```{str(bot_stats.last_error)}```",
                inline=False
            )
        
        # Errores recientes
        if recent_errors:
            recent_errors_text = "\n".join([
                f"‚Ä¢ {error['timestamp'].strftime('%H:%M:%S')} - {error['command']} - {error['error'][:50]}..."
                for error in recent_errors[-3:]  # Solo los √∫ltimos 3 errores
            ])
            embed.add_field(
                name="üìù Errores Recientes",
                value=recent_errors_text,
                inline=False
            )
        
        embed.set_footer(text=f"Debug solicitado por {ctx.author.name}")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error en debug_command: {e}")
        await ctx.send("‚ùå Error al obtener informaci√≥n de debug.")

# ============================================================================
# FUNCI√ìN PRINCIPAL
# ============================================================================

def main():
    """Funci√≥n principal que ejecuta el bot"""
    # Obtener token del bot desde variables de entorno
    bot_token = os.getenv('DISCORD_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå No se encontr√≥ DISCORD_BOT_TOKEN en las variables de entorno.")
        logger.error("Por favor, crea un archivo .env con: DISCORD_BOT_TOKEN=tu_token_aqui")
        return
    
    try:
        logger.info("ü§ñ Iniciando bot de Discord...")
        bot.run(bot_token)
    except discord.LoginFailure:
        logger.error("‚ùå Token de bot inv√°lido. Verifica tu DISCORD_BOT_TOKEN.")
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar el bot: {e}")

if __name__ == '__main__':
    main()