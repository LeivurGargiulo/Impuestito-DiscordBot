#!/usr/bin/env python3
"""
Telegram Bot para Impuestito
Bot de Telegram que proporciona informaci√≥n sobre cotizaciones de monedas
y c√°lculos de impuestos en Argentina usando el paquete impuestito.
"""

import asyncio
import logging
from typing import Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import impuestito
from impuestito.main import (
    cotization, oficial, blue, euro, euro_blue, 
    calcularImpuestoPais, CDolarOficial
)

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Token del bot - REEMPLAZAR CON TU TOKEN REAL
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /start - Mensaje de bienvenida"""
    welcome_message = """
ü§ñ *Bot de Impuestito*

¬°Hola! Soy un bot que te proporciona informaci√≥n sobre cotizaciones de monedas y c√°lculos de impuestos en Argentina.

üìã *Comandos disponibles:*

‚Ä¢ `/start` - Muestra este mensaje de ayuda
‚Ä¢ `/cotizacion` - Cotizaci√≥n actual de todas las monedas
‚Ä¢ `/oficial` - Cotizaci√≥n del d√≥lar oficial
‚Ä¢ `/blue` - Cotizaci√≥n del d√≥lar blue
‚Ä¢ `/euro` - Cotizaci√≥n del euro oficial
‚Ä¢ `/euro_blue` - Cotizaci√≥n del euro blue
‚Ä¢ `/impuesto_pais <cantidad>` - Calcula el impuesto pa√≠s (ej: `/impuesto_pais 100`)
‚Ä¢ `/dolar_pesos <cantidad>` - Convierte d√≥lares a pesos (ej: `/dolar_pesos 100`)

üí° *Ejemplo:* `/impuesto_pais 100` para calcular el impuesto pa√≠s sobre $100 USD
"""
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def cotizacion_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /cotizacion - Cotizaci√≥n completa"""
    try:
        # Obtener cotizaci√≥n completa
        cotizacion_data = cotization
        
        # Formatear respuesta
        response = "üìä *Cotizaciones Actuales*\n\n"
        
        # D√≥lar Oficial
        if 'oficial' in cotizacion_data:
            oficial_data = cotizacion_data['oficial']
            response += f"üíµ *D√≥lar Oficial:*\n"
            response += f"  ‚Ä¢ Compra: ${oficial_data.get('value_buy', 'N/A')}\n"
            response += f"  ‚Ä¢ Venta: ${oficial_data.get('value_sell', 'N/A')}\n"
            response += f"  ‚Ä¢ Promedio: ${oficial_data.get('value_avg', 'N/A')}\n\n"
        
        # D√≥lar Blue
        if 'blue' in cotizacion_data:
            blue_data = cotizacion_data['blue']
            response += f"üíô *D√≥lar Blue:*\n"
            response += f"  ‚Ä¢ Compra: ${blue_data.get('value_buy', 'N/A')}\n"
            response += f"  ‚Ä¢ Venta: ${blue_data.get('value_sell', 'N/A')}\n"
            response += f"  ‚Ä¢ Promedio: ${blue_data.get('value_avg', 'N/A')}\n\n"
        
        # Euro Oficial
        if 'oficial_euro' in cotizacion_data:
            euro_oficial_data = cotizacion_data['oficial_euro']
            response += f"üá™üá∫ *Euro Oficial:*\n"
            response += f"  ‚Ä¢ Compra: ${euro_oficial_data.get('value_buy', 'N/A')}\n"
            response += f"  ‚Ä¢ Venta: ${euro_oficial_data.get('value_sell', 'N/A')}\n"
            response += f"  ‚Ä¢ Promedio: ${euro_oficial_data.get('value_avg', 'N/A')}\n\n"
        
        # Euro Blue
        if 'blue_euro' in cotizacion_data:
            euro_blue_data = cotizacion_data['blue_euro']
            response += f"üá™üá∫üíô *Euro Blue:*\n"
            response += f"  ‚Ä¢ Compra: ${euro_blue_data.get('value_buy', 'N/A')}\n"
            response += f"  ‚Ä¢ Venta: ${euro_blue_data.get('value_sell', 'N/A')}\n"
            response += f"  ‚Ä¢ Promedio: ${euro_blue_data.get('value_avg', 'N/A')}\n\n"
        
        # √öltima actualizaci√≥n
        if 'last_update' in cotizacion_data:
            response += f"üïê *√öltima actualizaci√≥n:* {cotizacion_data['last_update']}"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en cotizacion_command: {e}")
        await update.message.reply_text("‚ùå Error al obtener las cotizaciones. Intenta m√°s tarde.")

async def oficial_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /oficial - D√≥lar oficial"""
    try:
        response = f"üíµ *D√≥lar Oficial:* ${oficial}"
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en oficial_command: {e}")
        await update.message.reply_text("‚ùå Error al obtener el d√≥lar oficial.")

async def blue_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /blue - D√≥lar blue"""
    try:
        response = f"üíô *D√≥lar Blue:* ${blue}"
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en blue_command: {e}")
        await update.message.reply_text("‚ùå Error al obtener el d√≥lar blue.")

async def euro_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /euro - Euro oficial"""
    try:
        response = f"üá™üá∫ *Euro Oficial:* ${euro}"
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en euro_command: {e}")
        await update.message.reply_text("‚ùå Error al obtener el euro oficial.")

async def euro_blue_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /euro_blue - Euro blue"""
    try:
        response = f"üá™üá∫üíô *Euro Blue:* ${euro_blue}"
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en euro_blue_command: {e}")
        await update.message.reply_text("‚ùå Error al obtener el euro blue.")

async def impuesto_pais_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /impuesto_pais - Calcula impuesto pa√≠s"""
    try:
        # Verificar si se proporcion√≥ una cantidad
        if not context.args:
            await update.message.reply_text(
                "‚ùå Por favor proporciona una cantidad.\n"
                "Ejemplo: `/impuesto_pais 100`", 
                parse_mode='Markdown'
            )
            return
        
        # Obtener cantidad del argumento
        try:
            cantidad = float(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
            return
        
        # Calcular impuesto pa√≠s
        resultado = calcularImpuestoPais(cantidad)
        
        # Formatear respuesta
        response = f"üí∞ *C√°lculo Impuesto Pa√≠s*\n\n"
        response += f"‚Ä¢ Cantidad original: ${resultado['cantidadVieja']} USD\n"
        response += f"‚Ä¢ Impuesto agregado: ${resultado['agregado']} USD\n"
        response += f"‚Ä¢ Cantidad final: ${resultado['cantidadFinal']} USD\n\n"
        response += f"üí° El impuesto pa√≠s es del 30% sobre la cantidad original."
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en impuesto_pais_command: {e}")
        await update.message.reply_text("‚ùå Error al calcular el impuesto pa√≠s.")

async def dolar_pesos_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja el comando /dolar_pesos - Convierte d√≥lares a pesos"""
    try:
        # Verificar si se proporcion√≥ una cantidad
        if not context.args:
            await update.message.reply_text(
                "‚ùå Por favor proporciona una cantidad.\n"
                "Ejemplo: `/dolar_pesos 100`", 
                parse_mode='Markdown'
            )
            return
        
        # Obtener cantidad del argumento
        try:
            cantidad_usd = float(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå La cantidad debe ser un n√∫mero v√°lido.")
            return
        
        # Calcular conversi√≥n usando el d√≥lar oficial
        pesos = oficial * cantidad_usd
        
        # Formatear respuesta
        response = f"üí± *Conversi√≥n D√≥lar a Pesos*\n\n"
        response += f"‚Ä¢ Cantidad: ${cantidad_usd} USD\n"
        response += f"‚Ä¢ Cotizaci√≥n: ${oficial} ARS/USD\n"
        response += f"‚Ä¢ Resultado: ${pesos:,.2f} ARS"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en dolar_pesos_command: {e}")
        await update.message.reply_text("‚ùå Error al convertir d√≥lares a pesos.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja errores del bot"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # Enviar mensaje de error al usuario si es posible
    if update and hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            "‚ùå Ocurri√≥ un error inesperado. Por favor, intenta m√°s tarde."
        )

def main() -> None:
    """Funci√≥n principal que ejecuta el bot"""
    # Crear aplicaci√≥n
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Agregar manejadores de comandos
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("cotizacion", cotizacion_command))
    application.add_handler(CommandHandler("oficial", oficial_command))
    application.add_handler(CommandHandler("blue", blue_command))
    application.add_handler(CommandHandler("euro", euro_command))
    application.add_handler(CommandHandler("euro_blue", euro_blue_command))
    application.add_handler(CommandHandler("impuesto_pais", impuesto_pais_command))
    application.add_handler(CommandHandler("dolar_pesos", dolar_pesos_command))
    
    # Agregar manejador de errores
    application.add_error_handler(error_handler)
    
    # Iniciar el bot
    print("ü§ñ Bot iniciado. Presiona Ctrl+C para detener.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()